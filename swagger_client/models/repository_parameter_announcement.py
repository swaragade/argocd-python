# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepositoryParameterAnnouncement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'array': 'list[str]',
        'collection_type': 'str',
        'item_type': 'str',
        'map': 'dict(str, str)',
        'name': 'str',
        'required': 'bool',
        'string': 'str',
        'title': 'str',
        'tooltip': 'str'
    }

    attribute_map = {
        'array': 'array',
        'collection_type': 'collectionType',
        'item_type': 'itemType',
        'map': 'map',
        'name': 'name',
        'required': 'required',
        'string': 'string',
        'title': 'title',
        'tooltip': 'tooltip'
    }

    def __init__(self, array=None, collection_type=None, item_type=None, map=None, name=None, required=None, string=None, title=None, tooltip=None):  # noqa: E501
        """RepositoryParameterAnnouncement - a model defined in Swagger"""  # noqa: E501
        self._array = None
        self._collection_type = None
        self._item_type = None
        self._map = None
        self._name = None
        self._required = None
        self._string = None
        self._title = None
        self._tooltip = None
        self.discriminator = None
        if array is not None:
            self.array = array
        if collection_type is not None:
            self.collection_type = collection_type
        if item_type is not None:
            self.item_type = item_type
        if map is not None:
            self.map = map
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if string is not None:
            self.string = string
        if title is not None:
            self.title = title
        if tooltip is not None:
            self.tooltip = tooltip

    @property
    def array(self):
        """Gets the array of this RepositoryParameterAnnouncement.  # noqa: E501

        array is the default value of the parameter if the parameter is an array.  # noqa: E501

        :return: The array of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: list[str]
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this RepositoryParameterAnnouncement.

        array is the default value of the parameter if the parameter is an array.  # noqa: E501

        :param array: The array of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: list[str]
        """

        self._array = array

    @property
    def collection_type(self):
        """Gets the collection_type of this RepositoryParameterAnnouncement.  # noqa: E501

        collectionType is the type of value this parameter holds - either a single value (a string) or a collection (array or map). If collectionType is set, only the field with that type will be used. If collectionType is not set, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.  # noqa: E501

        :return: The collection_type of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this RepositoryParameterAnnouncement.

        collectionType is the type of value this parameter holds - either a single value (a string) or a collection (array or map). If collectionType is set, only the field with that type will be used. If collectionType is not set, `string` is the default. If collectionType is set to an invalid value, a validation error is thrown.  # noqa: E501

        :param collection_type: The collection_type of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._collection_type = collection_type

    @property
    def item_type(self):
        """Gets the item_type of this RepositoryParameterAnnouncement.  # noqa: E501

        itemType determines the primitive data type represented by the parameter. Parameters are always encoded as strings, but this field lets them be interpreted as other primitive types.  # noqa: E501

        :return: The item_type of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this RepositoryParameterAnnouncement.

        itemType determines the primitive data type represented by the parameter. Parameters are always encoded as strings, but this field lets them be interpreted as other primitive types.  # noqa: E501

        :param item_type: The item_type of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def map(self):
        """Gets the map of this RepositoryParameterAnnouncement.  # noqa: E501

        map is the default value of the parameter if the parameter is a map.  # noqa: E501

        :return: The map of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this RepositoryParameterAnnouncement.

        map is the default value of the parameter if the parameter is a map.  # noqa: E501

        :param map: The map of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: dict(str, str)
        """

        self._map = map

    @property
    def name(self):
        """Gets the name of this RepositoryParameterAnnouncement.  # noqa: E501

        name is the name identifying a parameter.  # noqa: E501

        :return: The name of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryParameterAnnouncement.

        name is the name identifying a parameter.  # noqa: E501

        :param name: The name of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this RepositoryParameterAnnouncement.  # noqa: E501

        required defines if this given parameter is mandatory.  # noqa: E501

        :return: The required of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this RepositoryParameterAnnouncement.

        required defines if this given parameter is mandatory.  # noqa: E501

        :param required: The required of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def string(self):
        """Gets the string of this RepositoryParameterAnnouncement.  # noqa: E501

        string is the default value of the parameter if the parameter is a string.  # noqa: E501

        :return: The string of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string):
        """Sets the string of this RepositoryParameterAnnouncement.

        string is the default value of the parameter if the parameter is a string.  # noqa: E501

        :param string: The string of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._string = string

    @property
    def title(self):
        """Gets the title of this RepositoryParameterAnnouncement.  # noqa: E501

        title is a human-readable text of the parameter name.  # noqa: E501

        :return: The title of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RepositoryParameterAnnouncement.

        title is a human-readable text of the parameter name.  # noqa: E501

        :param title: The title of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def tooltip(self):
        """Gets the tooltip of this RepositoryParameterAnnouncement.  # noqa: E501

        tooltip is a human-readable description of the parameter.  # noqa: E501

        :return: The tooltip of this RepositoryParameterAnnouncement.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this RepositoryParameterAnnouncement.

        tooltip is a human-readable description of the parameter.  # noqa: E501

        :param tooltip: The tooltip of this RepositoryParameterAnnouncement.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryParameterAnnouncement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryParameterAnnouncement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
