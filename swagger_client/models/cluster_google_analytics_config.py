# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterGoogleAnalyticsConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anonymize_users': 'bool',
        'tracking_id': 'str'
    }

    attribute_map = {
        'anonymize_users': 'anonymizeUsers',
        'tracking_id': 'trackingID'
    }

    def __init__(self, anonymize_users=None, tracking_id=None):  # noqa: E501
        """ClusterGoogleAnalyticsConfig - a model defined in Swagger"""  # noqa: E501
        self._anonymize_users = None
        self._tracking_id = None
        self.discriminator = None
        if anonymize_users is not None:
            self.anonymize_users = anonymize_users
        if tracking_id is not None:
            self.tracking_id = tracking_id

    @property
    def anonymize_users(self):
        """Gets the anonymize_users of this ClusterGoogleAnalyticsConfig.  # noqa: E501


        :return: The anonymize_users of this ClusterGoogleAnalyticsConfig.  # noqa: E501
        :rtype: bool
        """
        return self._anonymize_users

    @anonymize_users.setter
    def anonymize_users(self, anonymize_users):
        """Sets the anonymize_users of this ClusterGoogleAnalyticsConfig.


        :param anonymize_users: The anonymize_users of this ClusterGoogleAnalyticsConfig.  # noqa: E501
        :type: bool
        """

        self._anonymize_users = anonymize_users

    @property
    def tracking_id(self):
        """Gets the tracking_id of this ClusterGoogleAnalyticsConfig.  # noqa: E501


        :return: The tracking_id of this ClusterGoogleAnalyticsConfig.  # noqa: E501
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this ClusterGoogleAnalyticsConfig.


        :param tracking_id: The tracking_id of this ClusterGoogleAnalyticsConfig.  # noqa: E501
        :type: str
        """

        self._tracking_id = tracking_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterGoogleAnalyticsConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterGoogleAnalyticsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
