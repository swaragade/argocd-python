# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1SCMProviderGeneratorGithub(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_branches': 'bool',
        'api': 'str',
        'app_secret_name': 'str',
        'organization': 'str',
        'token_ref': 'V1alpha1SecretRef'
    }

    attribute_map = {
        'all_branches': 'allBranches',
        'api': 'api',
        'app_secret_name': 'appSecretName',
        'organization': 'organization',
        'token_ref': 'tokenRef'
    }

    def __init__(self, all_branches=None, api=None, app_secret_name=None, organization=None, token_ref=None):  # noqa: E501
        """V1alpha1SCMProviderGeneratorGithub - a model defined in Swagger"""  # noqa: E501
        self._all_branches = None
        self._api = None
        self._app_secret_name = None
        self._organization = None
        self._token_ref = None
        self.discriminator = None
        if all_branches is not None:
            self.all_branches = all_branches
        if api is not None:
            self.api = api
        if app_secret_name is not None:
            self.app_secret_name = app_secret_name
        if organization is not None:
            self.organization = organization
        if token_ref is not None:
            self.token_ref = token_ref

    @property
    def all_branches(self):
        """Gets the all_branches of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501

        Scan all branches instead of just the default branch.  # noqa: E501

        :return: The all_branches of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :rtype: bool
        """
        return self._all_branches

    @all_branches.setter
    def all_branches(self, all_branches):
        """Sets the all_branches of this V1alpha1SCMProviderGeneratorGithub.

        Scan all branches instead of just the default branch.  # noqa: E501

        :param all_branches: The all_branches of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :type: bool
        """

        self._all_branches = all_branches

    @property
    def api(self):
        """Gets the api of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501

        The GitHub API URL to talk to. If blank, use https://api.github.com/.  # noqa: E501

        :return: The api of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this V1alpha1SCMProviderGeneratorGithub.

        The GitHub API URL to talk to. If blank, use https://api.github.com/.  # noqa: E501

        :param api: The api of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def app_secret_name(self):
        """Gets the app_secret_name of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501

        AppSecretName is a reference to a GitHub App repo-creds secret.  # noqa: E501

        :return: The app_secret_name of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :rtype: str
        """
        return self._app_secret_name

    @app_secret_name.setter
    def app_secret_name(self, app_secret_name):
        """Sets the app_secret_name of this V1alpha1SCMProviderGeneratorGithub.

        AppSecretName is a reference to a GitHub App repo-creds secret.  # noqa: E501

        :param app_secret_name: The app_secret_name of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :type: str
        """

        self._app_secret_name = app_secret_name

    @property
    def organization(self):
        """Gets the organization of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501

        GitHub org to scan. Required.  # noqa: E501

        :return: The organization of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this V1alpha1SCMProviderGeneratorGithub.

        GitHub org to scan. Required.  # noqa: E501

        :param organization: The organization of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def token_ref(self):
        """Gets the token_ref of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501


        :return: The token_ref of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :rtype: V1alpha1SecretRef
        """
        return self._token_ref

    @token_ref.setter
    def token_ref(self, token_ref):
        """Sets the token_ref of this V1alpha1SCMProviderGeneratorGithub.


        :param token_ref: The token_ref of this V1alpha1SCMProviderGeneratorGithub.  # noqa: E501
        :type: V1alpha1SecretRef
        """

        self._token_ref = token_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1SCMProviderGeneratorGithub, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SCMProviderGeneratorGithub):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
