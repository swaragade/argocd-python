# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1SCMProviderGenerator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_code_commit': 'V1alpha1SCMProviderGeneratorAWSCodeCommit',
        'azure_dev_ops': 'V1alpha1SCMProviderGeneratorAzureDevOps',
        'bitbucket': 'V1alpha1SCMProviderGeneratorBitbucket',
        'bitbucket_server': 'V1alpha1SCMProviderGeneratorBitbucketServer',
        'clone_protocol': 'str',
        'filters': 'list[V1alpha1SCMProviderGeneratorFilter]',
        'gitea': 'V1alpha1SCMProviderGeneratorGitea',
        'github': 'V1alpha1SCMProviderGeneratorGithub',
        'gitlab': 'V1alpha1SCMProviderGeneratorGitlab',
        'requeue_after_seconds': 'int',
        'template': 'V1alpha1ApplicationSetTemplate',
        'values': 'dict(str, str)'
    }

    attribute_map = {
        'aws_code_commit': 'awsCodeCommit',
        'azure_dev_ops': 'azureDevOps',
        'bitbucket': 'bitbucket',
        'bitbucket_server': 'bitbucketServer',
        'clone_protocol': 'cloneProtocol',
        'filters': 'filters',
        'gitea': 'gitea',
        'github': 'github',
        'gitlab': 'gitlab',
        'requeue_after_seconds': 'requeueAfterSeconds',
        'template': 'template',
        'values': 'values'
    }

    def __init__(self, aws_code_commit=None, azure_dev_ops=None, bitbucket=None, bitbucket_server=None, clone_protocol=None, filters=None, gitea=None, github=None, gitlab=None, requeue_after_seconds=None, template=None, values=None):  # noqa: E501
        """V1alpha1SCMProviderGenerator - a model defined in Swagger"""  # noqa: E501
        self._aws_code_commit = None
        self._azure_dev_ops = None
        self._bitbucket = None
        self._bitbucket_server = None
        self._clone_protocol = None
        self._filters = None
        self._gitea = None
        self._github = None
        self._gitlab = None
        self._requeue_after_seconds = None
        self._template = None
        self._values = None
        self.discriminator = None
        if aws_code_commit is not None:
            self.aws_code_commit = aws_code_commit
        if azure_dev_ops is not None:
            self.azure_dev_ops = azure_dev_ops
        if bitbucket is not None:
            self.bitbucket = bitbucket
        if bitbucket_server is not None:
            self.bitbucket_server = bitbucket_server
        if clone_protocol is not None:
            self.clone_protocol = clone_protocol
        if filters is not None:
            self.filters = filters
        if gitea is not None:
            self.gitea = gitea
        if github is not None:
            self.github = github
        if gitlab is not None:
            self.gitlab = gitlab
        if requeue_after_seconds is not None:
            self.requeue_after_seconds = requeue_after_seconds
        if template is not None:
            self.template = template
        if values is not None:
            self.values = values

    @property
    def aws_code_commit(self):
        """Gets the aws_code_commit of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The aws_code_commit of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorAWSCodeCommit
        """
        return self._aws_code_commit

    @aws_code_commit.setter
    def aws_code_commit(self, aws_code_commit):
        """Sets the aws_code_commit of this V1alpha1SCMProviderGenerator.


        :param aws_code_commit: The aws_code_commit of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorAWSCodeCommit
        """

        self._aws_code_commit = aws_code_commit

    @property
    def azure_dev_ops(self):
        """Gets the azure_dev_ops of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The azure_dev_ops of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorAzureDevOps
        """
        return self._azure_dev_ops

    @azure_dev_ops.setter
    def azure_dev_ops(self, azure_dev_ops):
        """Sets the azure_dev_ops of this V1alpha1SCMProviderGenerator.


        :param azure_dev_ops: The azure_dev_ops of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorAzureDevOps
        """

        self._azure_dev_ops = azure_dev_ops

    @property
    def bitbucket(self):
        """Gets the bitbucket of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The bitbucket of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorBitbucket
        """
        return self._bitbucket

    @bitbucket.setter
    def bitbucket(self, bitbucket):
        """Sets the bitbucket of this V1alpha1SCMProviderGenerator.


        :param bitbucket: The bitbucket of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorBitbucket
        """

        self._bitbucket = bitbucket

    @property
    def bitbucket_server(self):
        """Gets the bitbucket_server of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The bitbucket_server of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorBitbucketServer
        """
        return self._bitbucket_server

    @bitbucket_server.setter
    def bitbucket_server(self, bitbucket_server):
        """Sets the bitbucket_server of this V1alpha1SCMProviderGenerator.


        :param bitbucket_server: The bitbucket_server of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorBitbucketServer
        """

        self._bitbucket_server = bitbucket_server

    @property
    def clone_protocol(self):
        """Gets the clone_protocol of this V1alpha1SCMProviderGenerator.  # noqa: E501

        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.  # noqa: E501

        :return: The clone_protocol of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: str
        """
        return self._clone_protocol

    @clone_protocol.setter
    def clone_protocol(self, clone_protocol):
        """Sets the clone_protocol of this V1alpha1SCMProviderGenerator.

        Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.  # noqa: E501

        :param clone_protocol: The clone_protocol of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: str
        """

        self._clone_protocol = clone_protocol

    @property
    def filters(self):
        """Gets the filters of this V1alpha1SCMProviderGenerator.  # noqa: E501

        Filters for which repos should be considered.  # noqa: E501

        :return: The filters of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: list[V1alpha1SCMProviderGeneratorFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this V1alpha1SCMProviderGenerator.

        Filters for which repos should be considered.  # noqa: E501

        :param filters: The filters of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: list[V1alpha1SCMProviderGeneratorFilter]
        """

        self._filters = filters

    @property
    def gitea(self):
        """Gets the gitea of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The gitea of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorGitea
        """
        return self._gitea

    @gitea.setter
    def gitea(self, gitea):
        """Sets the gitea of this V1alpha1SCMProviderGenerator.


        :param gitea: The gitea of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorGitea
        """

        self._gitea = gitea

    @property
    def github(self):
        """Gets the github of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The github of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorGithub
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this V1alpha1SCMProviderGenerator.


        :param github: The github of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorGithub
        """

        self._github = github

    @property
    def gitlab(self):
        """Gets the gitlab of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The gitlab of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1SCMProviderGeneratorGitlab
        """
        return self._gitlab

    @gitlab.setter
    def gitlab(self, gitlab):
        """Sets the gitlab of this V1alpha1SCMProviderGenerator.


        :param gitlab: The gitlab of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1SCMProviderGeneratorGitlab
        """

        self._gitlab = gitlab

    @property
    def requeue_after_seconds(self):
        """Gets the requeue_after_seconds of this V1alpha1SCMProviderGenerator.  # noqa: E501

        Standard parameters.  # noqa: E501

        :return: The requeue_after_seconds of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: int
        """
        return self._requeue_after_seconds

    @requeue_after_seconds.setter
    def requeue_after_seconds(self, requeue_after_seconds):
        """Sets the requeue_after_seconds of this V1alpha1SCMProviderGenerator.

        Standard parameters.  # noqa: E501

        :param requeue_after_seconds: The requeue_after_seconds of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: int
        """

        self._requeue_after_seconds = requeue_after_seconds

    @property
    def template(self):
        """Gets the template of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The template of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: V1alpha1ApplicationSetTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha1SCMProviderGenerator.


        :param template: The template of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: V1alpha1ApplicationSetTemplate
        """

        self._template = template

    @property
    def values(self):
        """Gets the values of this V1alpha1SCMProviderGenerator.  # noqa: E501


        :return: The values of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this V1alpha1SCMProviderGenerator.


        :param values: The values of this V1alpha1SCMProviderGenerator.  # noqa: E501
        :type: dict(str, str)
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1SCMProviderGenerator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SCMProviderGenerator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
