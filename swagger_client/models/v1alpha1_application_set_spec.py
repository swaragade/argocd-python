# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1ApplicationSetSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_nested_selectors': 'bool',
        'generators': 'list[V1alpha1ApplicationSetGenerator]',
        'go_template': 'bool',
        'go_template_options': 'list[str]',
        'ignore_application_differences': 'list[V1alpha1ApplicationSetResourceIgnoreDifferences]',
        'preserved_fields': 'V1alpha1ApplicationPreservedFields',
        'strategy': 'V1alpha1ApplicationSetStrategy',
        'sync_policy': 'V1alpha1ApplicationSetSyncPolicy',
        'template': 'V1alpha1ApplicationSetTemplate',
        'template_patch': 'str'
    }

    attribute_map = {
        'apply_nested_selectors': 'applyNestedSelectors',
        'generators': 'generators',
        'go_template': 'goTemplate',
        'go_template_options': 'goTemplateOptions',
        'ignore_application_differences': 'ignoreApplicationDifferences',
        'preserved_fields': 'preservedFields',
        'strategy': 'strategy',
        'sync_policy': 'syncPolicy',
        'template': 'template',
        'template_patch': 'templatePatch'
    }

    def __init__(self, apply_nested_selectors=None, generators=None, go_template=None, go_template_options=None, ignore_application_differences=None, preserved_fields=None, strategy=None, sync_policy=None, template=None, template_patch=None):  # noqa: E501
        """V1alpha1ApplicationSetSpec - a model defined in Swagger"""  # noqa: E501
        self._apply_nested_selectors = None
        self._generators = None
        self._go_template = None
        self._go_template_options = None
        self._ignore_application_differences = None
        self._preserved_fields = None
        self._strategy = None
        self._sync_policy = None
        self._template = None
        self._template_patch = None
        self.discriminator = None
        if apply_nested_selectors is not None:
            self.apply_nested_selectors = apply_nested_selectors
        if generators is not None:
            self.generators = generators
        if go_template is not None:
            self.go_template = go_template
        if go_template_options is not None:
            self.go_template_options = go_template_options
        if ignore_application_differences is not None:
            self.ignore_application_differences = ignore_application_differences
        if preserved_fields is not None:
            self.preserved_fields = preserved_fields
        if strategy is not None:
            self.strategy = strategy
        if sync_policy is not None:
            self.sync_policy = sync_policy
        if template is not None:
            self.template = template
        if template_patch is not None:
            self.template_patch = template_patch

    @property
    def apply_nested_selectors(self):
        """Gets the apply_nested_selectors of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The apply_nested_selectors of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: bool
        """
        return self._apply_nested_selectors

    @apply_nested_selectors.setter
    def apply_nested_selectors(self, apply_nested_selectors):
        """Sets the apply_nested_selectors of this V1alpha1ApplicationSetSpec.


        :param apply_nested_selectors: The apply_nested_selectors of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: bool
        """

        self._apply_nested_selectors = apply_nested_selectors

    @property
    def generators(self):
        """Gets the generators of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The generators of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: list[V1alpha1ApplicationSetGenerator]
        """
        return self._generators

    @generators.setter
    def generators(self, generators):
        """Sets the generators of this V1alpha1ApplicationSetSpec.


        :param generators: The generators of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: list[V1alpha1ApplicationSetGenerator]
        """

        self._generators = generators

    @property
    def go_template(self):
        """Gets the go_template of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The go_template of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: bool
        """
        return self._go_template

    @go_template.setter
    def go_template(self, go_template):
        """Sets the go_template of this V1alpha1ApplicationSetSpec.


        :param go_template: The go_template of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: bool
        """

        self._go_template = go_template

    @property
    def go_template_options(self):
        """Gets the go_template_options of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The go_template_options of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._go_template_options

    @go_template_options.setter
    def go_template_options(self, go_template_options):
        """Sets the go_template_options of this V1alpha1ApplicationSetSpec.


        :param go_template_options: The go_template_options of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: list[str]
        """

        self._go_template_options = go_template_options

    @property
    def ignore_application_differences(self):
        """Gets the ignore_application_differences of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The ignore_application_differences of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: list[V1alpha1ApplicationSetResourceIgnoreDifferences]
        """
        return self._ignore_application_differences

    @ignore_application_differences.setter
    def ignore_application_differences(self, ignore_application_differences):
        """Sets the ignore_application_differences of this V1alpha1ApplicationSetSpec.


        :param ignore_application_differences: The ignore_application_differences of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: list[V1alpha1ApplicationSetResourceIgnoreDifferences]
        """

        self._ignore_application_differences = ignore_application_differences

    @property
    def preserved_fields(self):
        """Gets the preserved_fields of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The preserved_fields of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: V1alpha1ApplicationPreservedFields
        """
        return self._preserved_fields

    @preserved_fields.setter
    def preserved_fields(self, preserved_fields):
        """Sets the preserved_fields of this V1alpha1ApplicationSetSpec.


        :param preserved_fields: The preserved_fields of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: V1alpha1ApplicationPreservedFields
        """

        self._preserved_fields = preserved_fields

    @property
    def strategy(self):
        """Gets the strategy of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The strategy of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: V1alpha1ApplicationSetStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this V1alpha1ApplicationSetSpec.


        :param strategy: The strategy of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: V1alpha1ApplicationSetStrategy
        """

        self._strategy = strategy

    @property
    def sync_policy(self):
        """Gets the sync_policy of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The sync_policy of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: V1alpha1ApplicationSetSyncPolicy
        """
        return self._sync_policy

    @sync_policy.setter
    def sync_policy(self, sync_policy):
        """Sets the sync_policy of this V1alpha1ApplicationSetSpec.


        :param sync_policy: The sync_policy of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: V1alpha1ApplicationSetSyncPolicy
        """

        self._sync_policy = sync_policy

    @property
    def template(self):
        """Gets the template of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The template of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: V1alpha1ApplicationSetTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha1ApplicationSetSpec.


        :param template: The template of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: V1alpha1ApplicationSetTemplate
        """

        self._template = template

    @property
    def template_patch(self):
        """Gets the template_patch of this V1alpha1ApplicationSetSpec.  # noqa: E501


        :return: The template_patch of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._template_patch

    @template_patch.setter
    def template_patch(self, template_patch):
        """Sets the template_patch of this V1alpha1ApplicationSetSpec.


        :param template_patch: The template_patch of this V1alpha1ApplicationSetSpec.  # noqa: E501
        :type: str
        """

        self._template_patch = template_patch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ApplicationSetSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ApplicationSetSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
