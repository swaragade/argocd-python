# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1KustomizeSelector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation_selector': 'str',
        'label_selector': 'str',
        'res_id': 'V1alpha1KustomizeResId'
    }

    attribute_map = {
        'annotation_selector': 'annotationSelector',
        'label_selector': 'labelSelector',
        'res_id': 'resId'
    }

    def __init__(self, annotation_selector=None, label_selector=None, res_id=None):  # noqa: E501
        """V1alpha1KustomizeSelector - a model defined in Swagger"""  # noqa: E501
        self._annotation_selector = None
        self._label_selector = None
        self._res_id = None
        self.discriminator = None
        if annotation_selector is not None:
            self.annotation_selector = annotation_selector
        if label_selector is not None:
            self.label_selector = label_selector
        if res_id is not None:
            self.res_id = res_id

    @property
    def annotation_selector(self):
        """Gets the annotation_selector of this V1alpha1KustomizeSelector.  # noqa: E501


        :return: The annotation_selector of this V1alpha1KustomizeSelector.  # noqa: E501
        :rtype: str
        """
        return self._annotation_selector

    @annotation_selector.setter
    def annotation_selector(self, annotation_selector):
        """Sets the annotation_selector of this V1alpha1KustomizeSelector.


        :param annotation_selector: The annotation_selector of this V1alpha1KustomizeSelector.  # noqa: E501
        :type: str
        """

        self._annotation_selector = annotation_selector

    @property
    def label_selector(self):
        """Gets the label_selector of this V1alpha1KustomizeSelector.  # noqa: E501


        :return: The label_selector of this V1alpha1KustomizeSelector.  # noqa: E501
        :rtype: str
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this V1alpha1KustomizeSelector.


        :param label_selector: The label_selector of this V1alpha1KustomizeSelector.  # noqa: E501
        :type: str
        """

        self._label_selector = label_selector

    @property
    def res_id(self):
        """Gets the res_id of this V1alpha1KustomizeSelector.  # noqa: E501


        :return: The res_id of this V1alpha1KustomizeSelector.  # noqa: E501
        :rtype: V1alpha1KustomizeResId
        """
        return self._res_id

    @res_id.setter
    def res_id(self, res_id):
        """Sets the res_id of this V1alpha1KustomizeSelector.


        :param res_id: The res_id of this V1alpha1KustomizeSelector.  # noqa: E501
        :type: V1alpha1KustomizeResId
        """

        self._res_id = res_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1KustomizeSelector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1KustomizeSelector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
