# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1ResourceAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled': 'bool',
        'display_name': 'str',
        'icon_class': 'str',
        'name': 'str',
        'params': 'list[V1alpha1ResourceActionParam]'
    }

    attribute_map = {
        'disabled': 'disabled',
        'display_name': 'displayName',
        'icon_class': 'iconClass',
        'name': 'name',
        'params': 'params'
    }

    def __init__(self, disabled=None, display_name=None, icon_class=None, name=None, params=None):  # noqa: E501
        """V1alpha1ResourceAction - a model defined in Swagger"""  # noqa: E501
        self._disabled = None
        self._display_name = None
        self._icon_class = None
        self._name = None
        self._params = None
        self.discriminator = None
        if disabled is not None:
            self.disabled = disabled
        if display_name is not None:
            self.display_name = display_name
        if icon_class is not None:
            self.icon_class = icon_class
        if name is not None:
            self.name = name
        if params is not None:
            self.params = params

    @property
    def disabled(self):
        """Gets the disabled of this V1alpha1ResourceAction.  # noqa: E501


        :return: The disabled of this V1alpha1ResourceAction.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1alpha1ResourceAction.


        :param disabled: The disabled of this V1alpha1ResourceAction.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this V1alpha1ResourceAction.  # noqa: E501


        :return: The display_name of this V1alpha1ResourceAction.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V1alpha1ResourceAction.


        :param display_name: The display_name of this V1alpha1ResourceAction.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def icon_class(self):
        """Gets the icon_class of this V1alpha1ResourceAction.  # noqa: E501


        :return: The icon_class of this V1alpha1ResourceAction.  # noqa: E501
        :rtype: str
        """
        return self._icon_class

    @icon_class.setter
    def icon_class(self, icon_class):
        """Sets the icon_class of this V1alpha1ResourceAction.


        :param icon_class: The icon_class of this V1alpha1ResourceAction.  # noqa: E501
        :type: str
        """

        self._icon_class = icon_class

    @property
    def name(self):
        """Gets the name of this V1alpha1ResourceAction.  # noqa: E501


        :return: The name of this V1alpha1ResourceAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1ResourceAction.


        :param name: The name of this V1alpha1ResourceAction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this V1alpha1ResourceAction.  # noqa: E501


        :return: The params of this V1alpha1ResourceAction.  # noqa: E501
        :rtype: list[V1alpha1ResourceActionParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this V1alpha1ResourceAction.


        :param params: The params of this V1alpha1ResourceAction.  # noqa: E501
        :type: list[V1alpha1ResourceActionParam]
        """

        self._params = params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ResourceAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ResourceAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
