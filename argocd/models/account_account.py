# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capabilities': 'list[str]',
        'enabled': 'bool',
        'name': 'str',
        'tokens': 'list[AccountToken]'
    }

    attribute_map = {
        'capabilities': 'capabilities',
        'enabled': 'enabled',
        'name': 'name',
        'tokens': 'tokens'
    }

    def __init__(self, capabilities=None, enabled=None, name=None, tokens=None):  # noqa: E501
        """AccountAccount - a model defined in Swagger"""  # noqa: E501
        self._capabilities = None
        self._enabled = None
        self._name = None
        self._tokens = None
        self.discriminator = None
        if capabilities is not None:
            self.capabilities = capabilities
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if tokens is not None:
            self.tokens = tokens

    @property
    def capabilities(self):
        """Gets the capabilities of this AccountAccount.  # noqa: E501


        :return: The capabilities of this AccountAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this AccountAccount.


        :param capabilities: The capabilities of this AccountAccount.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    @property
    def enabled(self):
        """Gets the enabled of this AccountAccount.  # noqa: E501


        :return: The enabled of this AccountAccount.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AccountAccount.


        :param enabled: The enabled of this AccountAccount.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this AccountAccount.  # noqa: E501


        :return: The name of this AccountAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountAccount.


        :param name: The name of this AccountAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tokens(self):
        """Gets the tokens of this AccountAccount.  # noqa: E501


        :return: The tokens of this AccountAccount.  # noqa: E501
        :rtype: list[AccountToken]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this AccountAccount.


        :param tokens: The tokens of this AccountAccount.  # noqa: E501
        :type: list[AccountToken]
        """

        self._tokens = tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
