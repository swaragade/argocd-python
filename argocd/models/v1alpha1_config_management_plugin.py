# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1ConfigManagementPlugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generate': 'V1alpha1Command',
        'init': 'V1alpha1Command',
        'lock_repo': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'generate': 'generate',
        'init': 'init',
        'lock_repo': 'lockRepo',
        'name': 'name'
    }

    def __init__(self, generate=None, init=None, lock_repo=None, name=None):  # noqa: E501
        """V1alpha1ConfigManagementPlugin - a model defined in Swagger"""  # noqa: E501
        self._generate = None
        self._init = None
        self._lock_repo = None
        self._name = None
        self.discriminator = None
        if generate is not None:
            self.generate = generate
        if init is not None:
            self.init = init
        if lock_repo is not None:
            self.lock_repo = lock_repo
        if name is not None:
            self.name = name

    @property
    def generate(self):
        """Gets the generate of this V1alpha1ConfigManagementPlugin.  # noqa: E501


        :return: The generate of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :rtype: V1alpha1Command
        """
        return self._generate

    @generate.setter
    def generate(self, generate):
        """Sets the generate of this V1alpha1ConfigManagementPlugin.


        :param generate: The generate of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :type: V1alpha1Command
        """

        self._generate = generate

    @property
    def init(self):
        """Gets the init of this V1alpha1ConfigManagementPlugin.  # noqa: E501


        :return: The init of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :rtype: V1alpha1Command
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this V1alpha1ConfigManagementPlugin.


        :param init: The init of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :type: V1alpha1Command
        """

        self._init = init

    @property
    def lock_repo(self):
        """Gets the lock_repo of this V1alpha1ConfigManagementPlugin.  # noqa: E501


        :return: The lock_repo of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :rtype: bool
        """
        return self._lock_repo

    @lock_repo.setter
    def lock_repo(self, lock_repo):
        """Sets the lock_repo of this V1alpha1ConfigManagementPlugin.


        :param lock_repo: The lock_repo of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :type: bool
        """

        self._lock_repo = lock_repo

    @property
    def name(self):
        """Gets the name of this V1alpha1ConfigManagementPlugin.  # noqa: E501


        :return: The name of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1ConfigManagementPlugin.


        :param name: The name of this V1alpha1ConfigManagementPlugin.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ConfigManagementPlugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ConfigManagementPlugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
