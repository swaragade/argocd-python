# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1ResourceNetworkingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_urls': 'list[str]',
        'ingress': 'list[V1LoadBalancerIngress]',
        'labels': 'dict(str, str)',
        'target_labels': 'dict(str, str)',
        'target_refs': 'list[V1alpha1ResourceRef]'
    }

    attribute_map = {
        'external_urls': 'externalURLs',
        'ingress': 'ingress',
        'labels': 'labels',
        'target_labels': 'targetLabels',
        'target_refs': 'targetRefs'
    }

    def __init__(self, external_urls=None, ingress=None, labels=None, target_labels=None, target_refs=None):  # noqa: E501
        """V1alpha1ResourceNetworkingInfo - a model defined in Swagger"""  # noqa: E501
        self._external_urls = None
        self._ingress = None
        self._labels = None
        self._target_labels = None
        self._target_refs = None
        self.discriminator = None
        if external_urls is not None:
            self.external_urls = external_urls
        if ingress is not None:
            self.ingress = ingress
        if labels is not None:
            self.labels = labels
        if target_labels is not None:
            self.target_labels = target_labels
        if target_refs is not None:
            self.target_refs = target_refs

    @property
    def external_urls(self):
        """Gets the external_urls of this V1alpha1ResourceNetworkingInfo.  # noqa: E501

        ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.  # noqa: E501

        :return: The external_urls of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this V1alpha1ResourceNetworkingInfo.

        ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.  # noqa: E501

        :param external_urls: The external_urls of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :type: list[str]
        """

        self._external_urls = external_urls

    @property
    def ingress(self):
        """Gets the ingress of this V1alpha1ResourceNetworkingInfo.  # noqa: E501


        :return: The ingress of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :rtype: list[V1LoadBalancerIngress]
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress):
        """Sets the ingress of this V1alpha1ResourceNetworkingInfo.


        :param ingress: The ingress of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :type: list[V1LoadBalancerIngress]
        """

        self._ingress = ingress

    @property
    def labels(self):
        """Gets the labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501


        :return: The labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1alpha1ResourceNetworkingInfo.


        :param labels: The labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def target_labels(self):
        """Gets the target_labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501


        :return: The target_labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._target_labels

    @target_labels.setter
    def target_labels(self, target_labels):
        """Sets the target_labels of this V1alpha1ResourceNetworkingInfo.


        :param target_labels: The target_labels of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :type: dict(str, str)
        """

        self._target_labels = target_labels

    @property
    def target_refs(self):
        """Gets the target_refs of this V1alpha1ResourceNetworkingInfo.  # noqa: E501


        :return: The target_refs of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :rtype: list[V1alpha1ResourceRef]
        """
        return self._target_refs

    @target_refs.setter
    def target_refs(self, target_refs):
        """Sets the target_refs of this V1alpha1ResourceNetworkingInfo.


        :param target_refs: The target_refs of this V1alpha1ResourceNetworkingInfo.  # noqa: E501
        :type: list[V1alpha1ResourceRef]
        """

        self._target_refs = target_refs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ResourceNetworkingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ResourceNetworkingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
