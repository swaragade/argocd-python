# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationApplicationPatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_namespace': 'str',
        'name': 'str',
        'patch': 'str',
        'patch_type': 'str',
        'project': 'str'
    }

    attribute_map = {
        'app_namespace': 'appNamespace',
        'name': 'name',
        'patch': 'patch',
        'patch_type': 'patchType',
        'project': 'project'
    }

    def __init__(self, app_namespace=None, name=None, patch=None, patch_type=None, project=None):  # noqa: E501
        """ApplicationApplicationPatchRequest - a model defined in Swagger"""  # noqa: E501
        self._app_namespace = None
        self._name = None
        self._patch = None
        self._patch_type = None
        self._project = None
        self.discriminator = None
        if app_namespace is not None:
            self.app_namespace = app_namespace
        if name is not None:
            self.name = name
        if patch is not None:
            self.patch = patch
        if patch_type is not None:
            self.patch_type = patch_type
        if project is not None:
            self.project = project

    @property
    def app_namespace(self):
        """Gets the app_namespace of this ApplicationApplicationPatchRequest.  # noqa: E501


        :return: The app_namespace of this ApplicationApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_namespace

    @app_namespace.setter
    def app_namespace(self, app_namespace):
        """Sets the app_namespace of this ApplicationApplicationPatchRequest.


        :param app_namespace: The app_namespace of this ApplicationApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._app_namespace = app_namespace

    @property
    def name(self):
        """Gets the name of this ApplicationApplicationPatchRequest.  # noqa: E501


        :return: The name of this ApplicationApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationApplicationPatchRequest.


        :param name: The name of this ApplicationApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def patch(self):
        """Gets the patch of this ApplicationApplicationPatchRequest.  # noqa: E501


        :return: The patch of this ApplicationApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ApplicationApplicationPatchRequest.


        :param patch: The patch of this ApplicationApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._patch = patch

    @property
    def patch_type(self):
        """Gets the patch_type of this ApplicationApplicationPatchRequest.  # noqa: E501


        :return: The patch_type of this ApplicationApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._patch_type

    @patch_type.setter
    def patch_type(self, patch_type):
        """Sets the patch_type of this ApplicationApplicationPatchRequest.


        :param patch_type: The patch_type of this ApplicationApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._patch_type = patch_type

    @property
    def project(self):
        """Gets the project of this ApplicationApplicationPatchRequest.  # noqa: E501


        :return: The project of this ApplicationApplicationPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ApplicationApplicationPatchRequest.


        :param project: The project of this ApplicationApplicationPatchRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationApplicationPatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationApplicationPatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
