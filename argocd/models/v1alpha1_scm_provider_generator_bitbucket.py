# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1alpha1SCMProviderGeneratorBitbucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_branches': 'bool',
        'app_password_ref': 'V1alpha1SecretRef',
        'owner': 'str',
        'user': 'str'
    }

    attribute_map = {
        'all_branches': 'allBranches',
        'app_password_ref': 'appPasswordRef',
        'owner': 'owner',
        'user': 'user'
    }

    def __init__(self, all_branches=None, app_password_ref=None, owner=None, user=None):  # noqa: E501
        """V1alpha1SCMProviderGeneratorBitbucket - a model defined in Swagger"""  # noqa: E501
        self._all_branches = None
        self._app_password_ref = None
        self._owner = None
        self._user = None
        self.discriminator = None
        if all_branches is not None:
            self.all_branches = all_branches
        if app_password_ref is not None:
            self.app_password_ref = app_password_ref
        if owner is not None:
            self.owner = owner
        if user is not None:
            self.user = user

    @property
    def all_branches(self):
        """Gets the all_branches of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501

        Scan all branches instead of just the main branch.  # noqa: E501

        :return: The all_branches of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :rtype: bool
        """
        return self._all_branches

    @all_branches.setter
    def all_branches(self, all_branches):
        """Sets the all_branches of this V1alpha1SCMProviderGeneratorBitbucket.

        Scan all branches instead of just the main branch.  # noqa: E501

        :param all_branches: The all_branches of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :type: bool
        """

        self._all_branches = all_branches

    @property
    def app_password_ref(self):
        """Gets the app_password_ref of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501


        :return: The app_password_ref of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :rtype: V1alpha1SecretRef
        """
        return self._app_password_ref

    @app_password_ref.setter
    def app_password_ref(self, app_password_ref):
        """Sets the app_password_ref of this V1alpha1SCMProviderGeneratorBitbucket.


        :param app_password_ref: The app_password_ref of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :type: V1alpha1SecretRef
        """

        self._app_password_ref = app_password_ref

    @property
    def owner(self):
        """Gets the owner of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501

        Bitbucket workspace to scan. Required.  # noqa: E501

        :return: The owner of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this V1alpha1SCMProviderGeneratorBitbucket.

        Bitbucket workspace to scan. Required.  # noqa: E501

        :param owner: The owner of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def user(self):
        """Gets the user of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501


        :return: The user of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V1alpha1SCMProviderGeneratorBitbucket.


        :param user: The user of this V1alpha1SCMProviderGeneratorBitbucket.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1SCMProviderGeneratorBitbucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SCMProviderGeneratorBitbucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
